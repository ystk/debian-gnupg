#! /bin/sh /usr/share/dpatch/dpatch-run
## DP: From f0f71a721ccd7ab9e40b8b6b028b59632c0cc648 Mon Sep 17 00:00:00 2001
## DP: From: Werner Koch <wk@gnupg.org>
## DP: Date: Mon, 9 Feb 2015 15:46:00 +0100
## DP: Subject: [PATCH 1/1] gpg: Prevent an invalid memory read using a garbled
## DP:  keyring.
## DP: MIME-Version: 1.0
## DP: Content-Type: text/plain; charset=utf8
## DP: Content-Transfer-Encoding: 8bit
## DP: 
## DP: * g10/keyring.c (keyring_get_keyblock): Whitelist allowed packet
## DP: types.
## DP: * g10/keydb.c (parse_keyblock_image): Ditto.
## DP: --
## DP: 
## DP: The keyring DB code did not reject packets which don't belong into a
## DP: keyring.  If for example the keyblock contains a literal data packet
## DP: it is expected that the processing code stops at the data packet and
## DP: reads from the input stream which is referenced from the data packets.
## DP: Obviously the keyring processing code does not and cannot do that.
## DP: However, when exporting this messes up the IOBUF and leads to an
## DP: invalid read of sizeof (int).
## DP: 
## DP: We now skip all packets which are not allowed in a keyring.
## DP: 
## DP: Reported-by: Hanno BÃ¶ck <hanno@hboeck.de>
## DP: 
## DP: Test data:
## DP: 
## DP:   gpg2 --no-default-keyring --keyring FILE --export >/dev/null
## DP: 
## DP: With this unpacked data for FILE:
## DP: 
## DP: -----BEGIN PGP ARMORED FILE-----
## DP: 
## DP: mI0EVNP2zQEEALvETPVDCJDBXkegF4esiV1fqlne40yJnCmJeDEJYocwFPXfFA86
## DP: sSGjInzgDbpbC9gQPwq91Qe9x3Vy81CkyVonPOejhINlzfpzqAAa3A6viJccZTwt
## DP: DJ8E/I9jg53sbYW8q+VgfLn1hlggH/XQRT0HkXMP5y9ClURYnTsNwJhXABEBAAGs
## DP: CXRlc3QgdGVzdIi5BBMBCgAjBQJU0/bNAhsDBwsJCAcDAgEGFQgCCQoLBBYCAwEC
## DP: HgECF4AACgkQlsmuCapsqYLvtQP/byY0tM0Lc3moftbHQZ2eHj9ykLjsCjeMDfPx
## DP: kZUUtUS3HQaqgZLZOeqPjM7XgGh5hJsd9pfhmRWJ0x+iGB47XQNpRTtdLBV/WMCS
## DP: l5z3uW7e9Md7QVUVuSlJnBgQHTS6EgP8JQadPkAiF+jgpJZXP+gFs2j3gobS0qUF
## DP: eyTtxs+wAgAD
## DP: =uIt9
## DP: -----END PGP ARMORED FILE-----

@DPATCH@
--- a/g10/keyring.c
+++ b/g10/keyring.c
@@ -400,12 +400,31 @@
             rc = G10ERR_INV_KEYRING;
             break;
         }
-	if (pkt->pkttype == PKT_COMPRESSED) {
-	    log_error ("skipped compressed packet in keyring\n");
+
+        /* Filter allowed packets.  */
+        switch (pkt->pkttype)
+          {
+          case PKT_PUBLIC_KEY:
+          case PKT_PUBLIC_SUBKEY:
+          case PKT_SECRET_KEY:
+          case PKT_SECRET_SUBKEY:
+          case PKT_USER_ID:
+          case PKT_ATTRIBUTE:
+          case PKT_SIGNATURE:
+            break; /* Allowed per RFC.  */
+          case PKT_RING_TRUST:
+          case PKT_OLD_COMMENT:
+          case PKT_COMMENT:
+          case PKT_GPG_CONTROL:
+            break; /* Allowed by us.  */
+
+          default:
+	    log_error ("skipped packet of type %d in keyring\n",
+                       (int)pkt->pkttype);
 	    free_packet(pkt);
 	    init_packet(pkt);
 	    continue;
-        }
+          }
 
         if (in_cert && (pkt->pkttype == PKT_PUBLIC_KEY
                         || pkt->pkttype == PKT_SECRET_KEY)) {
@@ -467,7 +486,7 @@
     if (rc || !ret_kb)
 	release_kbnode (keyblock);
     else {
-        /*(duplicated form the loop body)*/
+        /*(duplicated from the loop body)*/
         if ( pkt && pkt->pkttype == PKT_RING_TRUST
              && lastnode
              && lastnode->pkt->pkttype == PKT_SIGNATURE
